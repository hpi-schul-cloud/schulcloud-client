{ _uid: 0,
  _isVue: true,
  '$options':
   { components:
      { App:
         { components:
            { Search:
               { render: { [Function: r] _withStripped: true },
                 staticRenderFns: [ [Function] ],
                 _compiled: true,
                 __file: 'static/scripts/userGeneratedContent/Search.vue' } },
           render: { [Function: r] _withStripped: true },
           staticRenderFns: [],
           _compiled: true,
           __file: 'static/scripts/userGeneratedContent/App.vue' } },
     directives: {},
     filters: {},
     _base:
      { [Function: pn]
        util:
         { warn: [Function: j],
           extend: [Function: S],
           mergeOptions: [Function: Nt],
           defineReactive: [Function: Ot] },
        set: [Function: St],
        delete: [Function: Et],
        nextTick: [Function: te],
        options:
         { components:
            { KeepAlive:
               { name: 'keep-alive',
                 abstract: true,
                 props:
                  { include: [ [Function: String], [Function: RegExp], [Function: Array] ],
                    exclude: [ [Function: String], [Function: RegExp], [Function: Array] ],
                    max: [ [Function: String], [Function: Number] ] },
                 created: [Function: created],
                 destroyed: [Function: destroyed],
                 mounted: [Function: mounted],
                 render: [Function: render] },
              Transition:
               { name: 'transition',
                 props:
                  { name: [Function: String],
                    appear: [Function: Boolean],
                    css: [Function: Boolean],
                    mode: [Function: String],
                    type: [Function: String],
                    enterClass: [Function: String],
                    leaveClass: [Function: String],
                    enterToClass: [Function: String],
                    leaveToClass: [Function: String],
                    enterActiveClass: [Function: String],
                    leaveActiveClass: [Function: String],
                    appearClass: [Function: String],
                    appearActiveClass: [Function: String],
                    appearToClass: [Function: String],
                    duration: [ [Function: Number], [Function: String], [Function: Object] ] },
                 abstract: true,
                 render: [Function: render] },
              TransitionGroup:
               { props:
                  { tag: [Function: String],
                    moveClass: [Function: String],
                    name: [Function: String],
                    appear: [Function: Boolean],
                    css: [Function: Boolean],
                    type: [Function: String],
                    enterClass: [Function: String],
                    leaveClass: [Function: String],
                    enterToClass: [Function: String],
                    leaveToClass: [Function: String],
                    enterActiveClass: [Function: String],
                    leaveActiveClass: [Function: String],
                    appearClass: [Function: String],
                    appearActiveClass: [Function: String],
                    appearToClass: [Function: String],
                    duration: [ [Function: Number], [Function: String], [Function: Object] ] },
                 render: [Function: render],
                 beforeUpdate: [Function: beforeUpdate],
                 updated: [Function: updated],
                 methods: { hasMove: [Function: hasMove] } } },
           directives:
            { model:
               { inserted: [Function: inserted],
                 componentUpdated: [Function: componentUpdated] },
              show:
               { bind: [Function: bind],
                 update: [Function: update],
                 unbind: [Function: unbind] } },
           filters: {},
           _base: [Circular] },
        use: [Function],
        mixin: [Function],
        cid: 0,
        extend: [Function],
        component: [Function],
        directive: [Function],
        filter: [Function],
        version: '2.5.16' },
     el: '#app',
     template: '<App/>',
     render: [Function: ht],
     _refElm: null,
     _parentElm: null },
  _renderProxy: [Circular],
  _self: [Circular],
  '$parent': undefined,
  '$root': [Circular],
  '$children': [],
  '$refs': {},
  _watcher:
   { vm: [Circular],
     sync: false,
     lazy: false,
     user: false,
     deep: false,
     cb: [Function: j],
     id: 1,
     active: true,
     dirty: false,
     deps: [],
     newDeps: [],
     depIds: {},
     newDepIds: {},
     expression: '',
     getter: [Function],
     value: undefined },
  _inactive: null,
  _directInactive: false,
  _isMounted: true,
  _isDestroyed: false,
  _isBeingDestroyed: false,
  _events: {},
  _hasHookEvent: false,
  _vnode:
   { tag: undefined,
     data: undefined,
     children: undefined,
     text: [Function],
     elm: { __vue__: [Circular] },
     ns: undefined,
     context: undefined,
     fnContext: undefined,
     fnOptions: undefined,
     fnScopeId: undefined,
     key: undefined,
     componentOptions: undefined,
     componentInstance: undefined,
     parent: undefined,
     raw: false,
     isStatic: false,
     isRootInsert: true,
     isComment: true,
     isCloned: false,
     isOnce: false,
     asyncFactory: undefined,
     asyncMeta: undefined,
     isAsyncPlaceholder: false },
  _staticTrees: null,
  '$vnode': undefined,
  '$slots': {},
  '$scopedSlots': {},
  _c: [Function],
  '$createElement': [Function],
  '$attrs': [Getter/Setter],
  '$listeners': [Getter/Setter],
  _watchers:
   [ { vm: [Circular],
       sync: false,
       lazy: false,
       user: false,
       deep: false,
       cb: [Function: j],
       id: 1,
       active: true,
       dirty: false,
       deps: [],
       newDeps: [],
       depIds: {},
       newDepIds: {},
       expression: '',
       getter: [Function],
       value: undefined } ],
  _data: {},
  '$el': { __vue__: [Circular] } }
